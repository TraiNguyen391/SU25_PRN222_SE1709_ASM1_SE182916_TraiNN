@page
@model SchoolMedical.RazorWebApp.TraiNN.Pages.MedicationTraiNns.IndexModel

@{
    ViewData["Title"] = "Medication List";
}

<style>
    .swamp-table thead {
        background-color: #b7e4c7 !important;
        color: #344e41 !important;
    }

    .swamp-table tbody tr {
        background-color: #d8f3dc;
        color: #344e41;
    }

        .swamp-table tbody tr:nth-child(even) {
            background-color: #f1faee;
        }

    .swamp-table th, .swamp-table td {
        border-color: #95d5b2 !important;
    }

    .badge.bg-success {
        background: #28a745 !important;
        color: #fff !important;
        font-weight: bold;
    }

    .badge.bg-danger {
        background: #dc3545 !important;
        color: #fff !important;
        font-weight: bold;
    }
    /* Title style */
    h1.text-primary {
        color: #344e41 !important;
        font-weight: bold;
        letter-spacing: 1px;
        text-shadow: 1px 2px 4px #b7e4c7;
    }
    /* Button styles */
    .btn-primary {
        background: #38b6ff !important; /* Xanh dương tươi */
        color: #fff !important;
        border: none;
        border-radius: 24px;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        box-shadow: 0 2px 8px #38b6ff33;
        transition: background 0.2s, box-shadow 0.2s;
    }
    .btn-primary:hover {
        background: #0096c7 !important;
        box-shadow: 0 4px 16px #38b6ff55;
    }

    .btn-success {
        background: #43aa8b !important; /* Xanh lá tươi */
        color: #fff !important;
        border: none;
        border-radius: 24px;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        box-shadow: 0 2px 8px #43aa8b33;
        transition: background 0.2s, box-shadow 0.2s;
    }
    .btn-success:hover {
        background: #2d6a4f !important;
        box-shadow: 0 4px 16px #43aa8b55;
    }

    .btn-info {
        background: #4361ee !important; /* Xanh tím */
        color: #fff !important;
        border: none;
        border-radius: 24px;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        box-shadow: 0 2px 8px #4361ee33;
        transition: background 0.2s, box-shadow 0.2s;
    }
    .btn-info:hover {
        background: #3a0ca3 !important;
        box-shadow: 0 4px 16px #4361ee55;
    }

    .btn-warning {
        background: #ffb703 !important; /* Cam vàng */
        color: #fff !important;
        border: none;
        border-radius: 24px;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        box-shadow: 0 2px 8px #ffb70333;
        transition: background 0.2s, box-shadow 0.2s;
    }
    .btn-warning:hover {
        background: #fb8500 !important;
        box-shadow: 0 4px 16px #ffb70355;
    }

    .btn-danger {
        background: #ef233c !important; /* Đỏ tươi */
        color: #fff !important;
        border: none;
        border-radius: 24px;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        box-shadow: 0 2px 8px #ef233c33;
        transition: background 0.2s, box-shadow 0.2s;
    }
    .btn-danger:hover {
        background: #d90429 !important;
        box-shadow: 0 4px 16px #ef233c55;
    }

    .btn-sm {
        font-size: 1rem;
        padding: 0.35rem 1rem;
        border-radius: 18px;
    }

    /* Table bo góc tròn */
    .table.swamp-table {
        border-radius: 24px !important;
        overflow: hidden;
        box-shadow: 0 2px 12px #b7e4c755;
        border-collapse: separate;
        border-spacing: 0;
    }

    .swamp-table th:first-child, .swamp-table td:first-child,
    .swamp-table th:last-child, .swamp-table td:last-child,
    .swamp-table tr:last-child td:first-child,
    .swamp-table tr:last-child td:last-child {
        border-radius: 0;
    }

    /* Search bar bo góc tròn */
    form.row.g-2.mb-3 .form-control {
        border-radius: 24px;
        box-shadow: 0 1px 4px #b7e4c733;
        border: 1px solid #b7e4c7;
        transition: border 0.2s, box-shadow 0.2s;
    }

        form.row.g-2.mb-3 .form-control:focus {
            border-color: #38b6ff;
            box-shadow: 0 0 0 0.2rem #38b6ff33;
        }
</style>

<h1 class="text-primary mb-4">@ViewData["Title"]</h1>

<form method="get" class="row g-2 mb-3">
    <div class="col">
        <input type="number" name="code" class="form-control" placeholder="Medication ID" value="@Request.Query["code"]" />
    </div>
    <div class="col">
        <input type="number" name="quantity" class="form-control" placeholder="Quantity" value="@Request.Query["quantity"]" />
    </div>
    <div class="col">
        <input type="text" name="medicineName" class="form-control" placeholder="Medicine Name" value="@Request.Query["medicineName"]" />
    </div>
    <div class="col">
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

<div class="mb-3">
    <a asp-page="Create" class="btn btn-success">
        <i class="bi bi-plus-circle"></i> Add New Medication
    </a>
</div>

<div class="table-responsive">
    <table class="table swamp-table table-striped table-bordered shadow-sm rounded">
        <thead class="table-info text-center">
            <tr>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].MedicationTraiNNid)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].MedicineName)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Quantity)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Unit)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Type)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Status)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].ReceiveDate)</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody id="medicationTBodyTraiNN">
            @foreach (var item in Model.MedicationTraiNn)
            {
                <tr id="@item.MedicationTraiNNid">
                    <td>@Html.DisplayFor(modelItem => item.MedicationTraiNNid)</td>
                    <td>@Html.DisplayFor(modelItem => item.MedicineName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Unit)</td>
                    <td>@Html.DisplayFor(modelItem => item.Type)</td>
                    <td class="text-center">
                        @if (item.Status.ToString() == "True")
                        {
                            <span class="badge bg-success">Available</span>
                        }
                        else if (item.Status.ToString() == "False")
                        {
                            <span class="badge bg-danger">Unavailable</span>
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.ReceiveDate)</td>
                    <td class="text-center">
                        <a asp-page="./Details" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-info text-white me-1">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <a asp-page="./Edit" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-warning text-white me-1">
                            <i class="bi bi-pencil-square"></i> Edit
                        </a>
                        <a asp-page="./Delete" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i> Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/schoolMedicalHub").build();

    connection.start().then(function () {
        console.log("Connected to the SignalR Hub");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    // --- Hàm render một hàng của bảng ---
    function createMedicationRow(item) {
        // Định dạng lại ngày tháng cho đẹp hơn (YYYY-MM-DD)
        const receiveDate = new Date(item.receiveDate).toISOString().split('T')[0];

        // Dùng ternary operator để quyết định hiển thị badge cho Status
        const statusBadge = item.status
            ? '<span class="badge bg-success">Available</span>'
            : '<span class="badge bg-danger">Unavailable</span>';

        return `
            <tr id="${item.medicationTraiNNid}">
                <td>${item.medicationTraiNNid}</td>
                <td>${item.medicineName}</td>
                <td>${item.quantity}</td>
                <td>${item.unit}</td>
                <td>${item.type}</td>
                <td class="text-center">${statusBadge}</td>
                <td>${receiveDate}</td>
                <td class="text-center">
                    <a href="/MedicationTraiNns/Details?id=${item.medicationTraiNNid}" class="btn btn-sm btn-info text-white me-1">
                        <i class="bi bi-eye"></i> Details
                    </a>
                    <a href="/MedicationTraiNns/Edit?id=${item.medicationTraiNNid}" class="btn btn-sm btn-warning text-white me-1">
                        <i class="bi bi-pencil-square"></i> Edit
                    </a>
                    <a href="/MedicationTraiNns/Delete?id=${item.medicationTraiNNid}" class="btn btn-sm btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </td>
            </tr>
        `;
    }

    connection.on("ReceiveDelete_SchoolMedical", function (medicationTraiNNid) {
        alert("A record has been deleted!");
        $('#medicationTBodyTraiNN').find(`tr[id='${medicationTraiNNid}']`).remove();
    });

    connection.on("ReceiveCreate_SchoolMedical", function (item) {
        console.log("ReceiveCreate_SchoolMedical", item);
        var newRowHtml = createMedicationRow(item);

        if (item.medicineName == "Test data") {
            alert("New test data created, the page will auto refresh in 5 seconds.");
        } else {
            alert("New record created, the page will auto refresh in 5 seconds.");
        }

        setTimeout(() => {
                window.location.href = "/MedicationTraiNns/Index";
            }, 5000); // Chờ 5 giây rồi chuyển hướng

        $('#medicationTBodyTraiNN').append(newRowHtml);
    });

    connection.on("ReceiveUpdate_SchoolMedical", function (item) {
        console.log("ReceiveUpdate_SchoolMedical", item);
        var existingRow = $(`#${item.medicationTraiNNid}`);

        if (existingRow.length > 0) {
            var updatedRowHtml = createMedicationRow(item);
            alert("A record has been updated!");
            existingRow.replaceWith(updatedRowHtml);
        }
    });
</script>