@page
@model SchoolMedical.RazorWebApp.TraiNN.Pages.MedicationTraiNns.IndexModel

@{
    ViewData["Title"] = "Medication List";
}

<h1 class="text-primary mb-4">@ViewData["Title"]</h1>

<div class="mb-3">
    <a asp-page="Create" class="btn btn-success">
        <i class="bi bi-plus-circle"></i> Add New Medication
    </a>
</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered shadow-sm rounded">
        <thead class="table-info text-center">
            <tr>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].MedicationTraiNNid)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].MedicineName)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Quantity)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Unit)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Type)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].Status)</th>
                <th>@Html.DisplayNameFor(model => model.MedicationTraiNn[0].ReceiveDate)</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody id="medicationTBodyTraiNN">
            @foreach (var item in Model.MedicationTraiNn)
            {
                <tr id="@item.MedicationTraiNNid">
                    <td>@Html.DisplayFor(modelItem => item.MedicationTraiNNid)</td>
                    <td>@Html.DisplayFor(modelItem => item.MedicineName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Unit)</td>
                    <td>@Html.DisplayFor(modelItem => item.Type)</td>
                    <td class="text-center">
                        @if (item.Status.ToString() == "True")
                        {
                            <span class="badge bg-success">Available</span>
                        }
                        else if (item.Status.ToString() == "False")
                        {
                            <span class="badge bg-danger">Unavailable</span>
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.ReceiveDate)</td>
                    <td class="text-center">
                        <a asp-page="./Details" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-info text-white me-1">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <a asp-page="./Edit" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-warning text-white me-1">
                            <i class="bi bi-pencil-square"></i> Edit
                        </a>
                        <a asp-page="./Delete" asp-route-id="@item.MedicationTraiNNid" class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i> Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/schoolMedicalHub").build();

    connection.start().then(function () {
        console.log("Connected to the SignalR Hub");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    // --- Hàm render một hàng của bảng ---
    function createMedicationRow(item) {
        // Định dạng lại ngày tháng cho đẹp hơn (YYYY-MM-DD)
        const receiveDate = new Date(item.receiveDate).toISOString().split('T')[0];

        // Dùng ternary operator để quyết định hiển thị badge cho Status
        const statusBadge = item.status
            ? '<span class="badge bg-success">Available</span>'
            : '<span class="badge bg-danger">Unavailable</span>';

        return `
            <tr id="${item.medicationTraiNNid}">
                <td>${item.medicationTraiNNid}</td>
                <td>${item.medicineName}</td>
                <td>${item.quantity}</td>
                <td>${item.unit}</td>
                <td>${item.type}</td>
                <td class="text-center">${statusBadge}</td>
                <td>${receiveDate}</td>
                <td class="text-center">
                    <a href="/MedicationTraiNns/Details?id=${item.medicationTraiNNid}" class="btn btn-sm btn-info text-white me-1">
                        <i class="bi bi-eye"></i> Details
                    </a>
                    <a href="/MedicationTraiNns/Edit?id=${item.medicationTraiNNid}" class="btn btn-sm btn-warning text-white me-1">
                        <i class="bi bi-pencil-square"></i> Edit
                    </a>
                    <a href="/MedicationTraiNns/Delete?id=${item.medicationTraiNNid}" class="btn btn-sm btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </td>
            </tr>
        `;
    }

    connection.on("ReceiveDelete_SchoolMedical", function (medicationTraiNNid) {
        alert("A record has been deleted!");
        $('#medicationTBodyTraiNN').find(`tr[id='${medicationTraiNNid}']`).remove();
    });

    connection.on("ReceiveCreate_SchoolMedical", function (item) {
        console.log("ReceiveCreate_SchoolMedical", item);
        var newRowHtml = createMedicationRow(item);

        if (item.medicineName == "Test data") {
            alert("New test data created!");
        } else {
            alert("New record data created!");
        }

        $('#medicationTBodyTraiNN').append(newRowHtml);
    });

    connection.on("ReceiveUpdate_SchoolMedical", function (item) {
        console.log("ReceiveUpdate_SchoolMedical", item);
        var existingRow = $(`#${item.medicationTraiNNid}`);

        if (existingRow.length > 0) {
            var updatedRowHtml = createMedicationRow(item);
            alert("A record has been updated!");
            existingRow.replaceWith(updatedRowHtml);
        }
    });
</script>